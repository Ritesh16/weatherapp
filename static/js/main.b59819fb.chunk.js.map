{"version":3,"sources":["components/Weather.js","components/City.js","components/CityList.js","components/AddCity.js","App.js","serviceWorker.js","index.js"],"names":["Weather","React","Component","City","onViewChange","view","setState","state","weather","time","timeArray","split","date","Date","UTC","getFullYear","getMonth","getDate","parseInt","toLocaleTimeString","cityName","this","props","city","url","fetch","then","response","json","data","className","alt","src","icon","description","temp","aqi","precip","snow","trigger","href","position","close","onClick","city_name","state_code","country_code","app_temp","vis","rh","clouds","wind_spd","ob_time","wind_cdir_full","getCurrentTime","sunrise","sunset","lat","lon","pres","slp","CityList","cities","map","key","AddCity","onChange","onCityChange","type","placeholder","onAddCityClick","App","event","target","value","method","headers","body","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b59819fb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass Weather extends React.Component {\r\n    render(){\r\n       return(\r\n           <div>\r\n               Loading.......\r\n           </div>\r\n       ); \r\n    }\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport Weather from './Weather';\r\nimport Popup from 'reactjs-popup';\r\nimport 'reactjs-popup/dist/index.css';\r\nimport './city.css';\r\n\r\nclass City extends React.Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            view: 'main', \r\n            weather:{\r\n\r\n            }\r\n        };\r\n    }\r\n\r\n    onViewChange = (view) => {\r\n        this.setState({view:view});\r\n    }\r\n\r\n    getCurrentTime(time){\r\n        var timeArray = time.split(':');\r\n        var date = new Date();\r\n\r\n        var utcDateTime = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), parseInt(timeArray[0]), parseInt(timeArray[1])));\r\n\r\n        return utcDateTime.toLocaleTimeString();\r\n    }\r\n\r\n    componentDidMount(){\r\n        var cityName = this.props.city.split(',');\r\n        var city = cityName[0];\r\n        var state = cityName[1];\r\n        var url = `https://vast-sierra-37559.herokuapp.com/Weather/city/${city}/State/${state}`;\r\n\r\n        fetch(url)\r\n        .then(response=>response.json())\r\n        .then(weather=> {\r\n            this.setState({ weather: weather})\r\n        });   \r\n    }\r\n\r\n   render(){\r\n    const {view, weather } = this.state;\r\n    const {city} = this.props;\r\n\r\n        if(weather.data){\r\n            if(view==='main'){\r\n                const data = weather.data[0];\r\n\r\n                return(\r\n                    <div  className='tc bg-light-blue dib br3 pa3 ma2 shadow-5 pointer'>\r\n                        <img alt='_photo' src={`https://www.weatherbit.io/static/img/icons/${weather.data[0].weather.icon}.png`} />\r\n                       <div>\r\n                            <h2>{city}</h2>\r\n                            <p>{weather.data[0].weather.description}</p>\r\n                            <p>Temp: {data.temp * 9/5 + 32}°F</p>\r\n                            <p>AQI: {data.aqi}</p>\r\n                            <p>Rain: {data.precip}%</p>\r\n                            <p>Snow: {data.snow}%</p>\r\n                        </div>\r\n                        <Popup trigger={<a className=\"f6 link dim br-pill ph3 pv2 mb2 dib white bg-dark-blue\" href=\"#0\">Details</a>} position=\"right center\">\r\n                        {close => (\r\n                         <div className=\"modal\">\r\n                              <button className=\"close\" onClick={close}>\r\n                                          &times;\r\n                              </button>\r\n                        <div className=\"header\"> {weather.data[0].city_name}, {weather.data[0].state_code} ({weather.data[0].country_code})</div>\r\n                              <div className=\"content\">\r\n                                <p><strong>{data.weather.description}</strong></p>\r\n                                <p>Temp: {data.temp * 9/5 + 32}°F</p>\r\n                                <p>Feels Like: {data.app_temp * 9/5 + 32}°F</p>\r\n                                <p>AQI: {data.aqi}</p>\r\n                                <p>Visibility: {data.vis} KM</p>\r\n                                <p>Rain: {data.precip} mm/hr</p>\r\n                                <p>Snow: {data.snow} mm/hr</p>\r\n                                <p>Humidity: {data.rh}%</p>\r\n                                <p>Clouds: {data.clouds}%</p>\r\n                                <p>Wind Speed: {data.wind_spd}m/s</p>\r\n                                <p>Observed on: {data.ob_time}</p>\r\n                                <p>Wind Direction: {data.wind_cdir_full}</p>\r\n                                <p>Sunrise: {this.getCurrentTime(data.sunrise)}</p>\r\n                                <p>Sunset: {this.getCurrentTime(data.sunset)}</p>\r\n                                <p>Lat: {data.lat}</p>\r\n                                <p>Long: {data.lon}</p>\r\n                                <p>Pressure: {data.pres} mb</p>\r\n                                <p>Sea Level Pressure: {data.slp} mb</p>\r\n                             </div>\r\n                        </div>\r\n                        )}\r\n                        </Popup>\r\n                    </div>\r\n                    );\r\n            }\r\n            else{\r\n                return (<Weather weather={weather} />)\r\n            }\r\n        }\r\n        else{\r\n            return (\r\n            <div className='tc bg-light-blue dib br3 pa3 ma2 grow shadow-5'>\r\n                  Loading......\r\n                 <div>\r\n                    <h2>{city}</h2>\r\n                    <p>Loading......</p>\r\n                 </div>\r\n            </div>  \r\n            );  \r\n        }\r\n   }      \r\n}\r\n\r\nexport default City;","import React from 'react';\r\nimport City from './City';\r\n\r\nclass CityList extends React.Component {\r\n    \r\n    render(){\r\n        return (\r\n            <div>\r\n                {\r\n                    this.props.cities.map(city => {\r\n                        return (\r\n                            <City key={city} city={city} />\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CityList;","import React from 'react';\r\n\r\nclass AddCity extends React.Component {\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                 <input \r\n                  onChange = {this.props.onCityChange}\r\n                  className='pa2 ba b--green bg-lightest-blue'\r\n                  type='text' \r\n                  placeholder='Add City(City,State)'\r\n                   />\r\n                   <a onClick={this.props.onAddCityClick} className=\"f6 link dim ph3 pv2 mb2 dib white bg-dark-blue\" href=\"#0\">Add</a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddCity;","import React from 'react';\nimport './App.css';\nimport CityList from './components/CityList';\nimport AddCity from './components/AddCity';\n\nclass App extends React.Component {\n  constructor(){\n    super();\n      \n    this.state = {\n      cities: [],\n      city:''\n    };\n  }\n\n  onCityChange = (event) => {\n    this.setState({city: event.target.value})\n  }\n\n\n  onAddCityClick = () => {\n    fetch('https://vast-sierra-37559.herokuapp.com/cities', {\n      method: 'post',\n      headers: { 'Content-Type':'application/json' },\n      body: JSON.stringify({\n        city: this.state.city,\n      })\n    })\n    .then(response => response.json())\n    .then(cities => {\n        this.setState({cities:cities});\n    })\n}\n\n  componentDidMount(){\n    fetch('https://vast-sierra-37559.herokuapp.com/cities')\n        .then(response => response.json())\n        .then(data => {\n           this.setState({cities: data})\n        });\n  }\n\n  render(){\n    return (\n      <div>\n        <div className='tc'>\n          <h1 className='f1'>Weather Today</h1>\n          <AddCity onCityChange={this.onCityChange} onAddCityClick={this.onAddCityClick} />\n          <CityList cities={this.state.cities} />\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}